#!/usr/bin/env groovy

@Grab(group='org.json', module='json', version='20180813')
import groovy.json.JsonSlurper
import groovy.json.JsonBuilder

def  usage() {
    println 'usage:'
    println 'work'
    println '\tChange directory to the directory of the most recently used project alias.  If no alias is set, the CWD does not change.'
    println ''
    println 'work <project alias>'
    println '\tChange directory to the location of the directory associated with the project alias.'
    println ''
    println 'work --list'
    println '\tLists the known work locations, showing both the alias and the corresponding path.'
    println ''
    println 'work --save'
    println '\tSaves the current path to the list of known work locations using the final segment of the path as the alias. If said alias exists, it will be suffixed.'
    println ''
    println 'work --save <project alias>'
    println '\tSaves the current path to the list of known work locations with the specificed project alias.'
    println ''
    println 'work --rename <existing project alias> <new project alias>'
    println '\tRenames the existing project alias to the new alias. If the new alias exists, it will be suffixed. If the existing project alias does not exist, no change occurs.'
    println ''
    println 'work -h --help'
    println '\tOutput this help.'
}

def validNumberOfArgs(args) {
    args.size() < 4
}

// SEE: https://stackoverflow.com/questions/159148/groovy-executing-shell-commands
def switchTo() {
    println 'switchTo()'
    // def cmd = 'echo $PWD'
    // println cmd
    // def proc = cmd.execute()
    // println proc.in.text
    // println proc.err.text

    // println proc.err.text    
    // // def cmd = "/bin/bash cd ${jsonFromFile.work.last.dir}"
    // cmd = "cd ${jsonFromFile.work.last.dir}"
    // println cmd
    // proc = cmd.execute()

    // println proc.err.text  

    // println 'after CD'
    // cmd = 'echo $PWD'
    // println cmd
    // proc = cmd.execute()
    // println proc.in.text
    // println proc.err.text
  
    def sout = new StringBuilder()
    def serr = new StringBuilder()

    def proc = "ls".execute()
    proc.consumeProcessOutput(sout, serr)
    proc.waitForOrKill(1000)
    println "first ls -> out> $sout err> $serr"

    println "user.dir is " + System.properties.'user.dir'
  
    def to = jsonFromFile.work.last.dir
    // println "to -> $to"
    // def proc = ["/bin/bash", "cd", "${to}"].execute()
    // def cmd = "/bin/bash -c cd ${to}"
    def cmd = ["sh", "-c", "cd ${to}"]
    println "executing $cmd"
    proc = cmd.execute()
    proc.consumeProcessOutput(sout, serr)
    proc.waitForOrKill(1000)
    println "out> $sout err> $serr"

    System.properties.'user.dir' = to
    println "user.dir is " + System.properties.'user.dir'
    proc = "ls".execute()
    // proc.consumeProcessOutput(sout, serr)
    // proc.waitForOrKill(1000)
    // println "second ls -> out> $sout err> $serr"
    // cwd = new File('.').canonicalPath
    // println "after cwd is $cwd"
  
    // sout = new StringBuilder() 
    // serr = new StringBuilder()
    // proc = "echo \$PWD".execute()
    // proc.consumeProcessOutput(sout, serr)
    // proc.waitForOrKill(1000)
    // println "out> $sout err> $serr"


}

def list() {
    if (!aliasFile.text) {
        println "Workman file empty."
        return
    }

    def BOLD = '\033[0;1m';
    def UNDERLINE = '\033[0;4m';
    def RESET = '\033[0;0m';
    def BOLD_UNDERLINE = '\033[0;1;4m'
    def json = jsonFromFile
    def current = json.work.last.alias

    json.work.aliases.sort{ it.alias }.each { 
        def aliasLine = current != it.alias ?
            "${BOLD_UNDERLINE}${it.alias}${RESET}" :
            "${BOLD_UNDERLINE}*${it.alias}*${RESET}"
        
        println aliasLine
        println "path: location: ${it.dir}"
        println "tags: ${it.tags.join(', ')}"
        println ""
    }
    
}

def getHomeDir() {
    def userhome = System.getProperty('user.home')
    def workHome = '/.work'

    def homeDir = new File("${System.getProperty('user.home')}/.work")

    if (!homeDir.exists()) {
        homeDir.mkdirs()
    }

    return homeDir
}

def getAliasFile() {
    def aliasFile = new File(homeDir, "alias.json")

    if (!aliasFile.exists()) {
        aliasFile.createNewFile()
    }

    return aliasFile
}

def slurpText(text) {
    return new JsonSlurper().parseText(text)
}

def getJsonFromFile() {
    return slurpText(aliasFile.text)
}

def getJsonFromStub() {
    return slurpText("""{
        "work": {
            "last": {
                "alias": "stub",
                "dir": "stub",
                "tags": ["stub"]
            },
            "aliases": [],
            "tags": ["stub"]
        }
    }""")
}

def getAliasJson() {
    return aliasFile.text ? jsonFromFile : jsonFromStub
}

def getJsonBuilder() {
    println "jsonBuilder()"


    return new JsonBuilder(aliasJson)

}

def saveWithDefaultAlias() {
    println 'saveWithDefaultAlias()'
}

def saveWithAlias() {
    println 'saveWithAlias()'
}

def save() {
    println 'save()'
    manFile = aliasFile
    def cwd = System.getProperty('user.dir')
    def name = new File(cwd).name

    def builder = jsonBuilder
   // set last alias
    builder.content.work.last.alias = name
    builder.content.work.last.dir = cwd
    // add to aliases
    builder.content.work.aliases << [ alias: name, dir: cwd ]

    // println builder.toPrettyString()
    aliasFile.newWriter().withWriter { w ->
        w << builder.toPrettyString()
    }
}

if (args.size() == 0) {
    switchTo()
}
if (args.contains('-h') || args.contains('--help')) {
    usage()
}
else if (args.contains('--list')) {
    list()
}
else if (args.contains('--save')) {
    save()
}
else if (args.size() == 1) {
    switchTo()
}
else {
    println 'NOT YET IMPLEMENTED'
}

println '...done'
